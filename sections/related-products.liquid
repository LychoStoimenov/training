{{ 'related-products.css' | asset_url | stylesheet_tag }}

{%- assign tags = product.tags | join: ' OR tag:' | prepend: 'tag:' -%}
{%- assign main_tags_array = product.tags | join: ',' -%}


<div class="related-products">
  <div class="shell">
    <div class="related__header">
      <h2>Related Products Based on tags</h2>
    </div>
    <!-- /.related__header -->

    <div class="related__content">
      <div class="slider-related-products-tags">
        <div class="swiper">
          <div class="swiper-wrapper">

          </div><!-- /.swiper-wrapper -->
        </div><!-- /.swiper-container -->
      </div>
      <!-- /.slider-related-products-tags -->
    </div>
    <!-- /.related__content -->
  </div>
  <!-- /.shell -->
</div>
<!-- /.related-products -->

<script type="text/javascript">
  const slidersTags = document.querySelectorAll('.slider-related-products-tags');
  const sliderContainer = document.querySelector('.slider-related-products-tags');
  const initSlider = sliderContainer.querySelector('.swiper');
  const destination = sliderContainer.querySelector('.swiper-wrapper');

  fetch(`//${window.location.host}/api/2022-04/graphql.json`, {
    method: 'POST',
    headers: {
      'X-Shopify-Storefront-Access-Token': 'be68f875893107e3d878cf57a0a7abdd',
      'Content-Type': 'application/graphql',
    },
    body: `query {
      products(first: 100, query: "{{tags}}") {
        edges {
          node {
            handle,
            title,
            featuredImage {
              originalSrc
            },
            priceRange {
              maxVariantPrice {
                amount,
                currencyCode
              },
              minVariantPrice {
                amount,
                currencyCode
              }
            },
            tags,
          }
        }
      }
    }`
  }).then(res => {
    return res.json();
  }).then(data => {
    const products = data.data.products.edges;

    const initialArrayLength = '{{main_tags_array}}'.split(',').length;

    products.forEach(product => {
      const handle = product.node.handle;
      const title = product.node.title;
      const imageUrl = product.node.featuredImage.originalSrc;
      const priceAmount = product.node.priceRange.minVariantPrice.amount;
      const priceCurrency = product.node.priceRange.minVariantPrice.currencyCode;
      const productTags = product.node.tags;

      if ('{{product.handle}}' !== handle) {
        let mainArray = '{{main_tags_array}}'.split(',');

        mainArray = mainArray.filter(val => !productTags.includes(val));

        let order = 0;

        const sameItemsCount = initialArrayLength - mainArray.length;

        if (sameItemsCount >= 3) {
          order = -2;
        } else if (sameItemsCount == 2) {
          order = -1;
        } else {
          order = 0;
        }

        const slideItem = `
          <div class="swiper-slide" style="order: ${order};">
            <div class="product-simple">
              <div class="product__inner">
                <div class="product__image">
                  <img src="${imageUrl}" alt="Image">
                  <a href="/products/${handle}"></a>
                </div>
                <div class="product__content">
                  <h3 class="product__title">
                    <a href="/products/${handle}">
                      ${title}
                    </a>
                  </h3>
                  <div class="product__price">
                    <span>
                      ${priceAmount} ${priceCurrency}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `;

        destination.innerHTML = destination.innerHTML + slideItem;

      }
    })


    //slider here

    slidersTags.forEach((slider) => {
      const initSlider = slider.querySelector('.swiper');
      // const dots = slider.querySelector('.swiper-pagination');
      const slidesLength = initSlider.querySelectorAll('.swiper-slide').length;
      const swiperWrapper = initSlider.querySelector('.swiper-wrapper');


      let centeredSlides = false;
      let centeredSlidesBounds = false;

      if (slidesLength > 5) {
        centeredSlides = false;
        centeredSlidesBounds = false;
      }


      const mySwiper = new Swiper(initSlider, {
        loop: false,
        slidesPerView: 5,
        spaceBetween: 80,
        // pagination: {
        //   el: dots,
        //   clickable: true,
        // },
      });

      if (slidesLength <= 5) {
        mySwiper.disable();
        swiperWrapper.style.justifyContent = 'center';
      }

      if (slidesLength < 5) {
      }
    });
  })

</script>


{% schema %}
{
  "name": "Related Products - TAGS",
  "settings": [],
  "presets": [
    {
      "name": "Related Products - TAGS",
      "category": "Section"
    }
  ]
}
{% endschema %}